// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ErrInstructionErrorFlatBuffer } from '../solana/err-instruction-error-flat-buffer.js';


export class StatusFlatBuffer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StatusFlatBuffer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStatusFlatBuffer(bb:flatbuffers.ByteBuffer, obj?:StatusFlatBuffer):StatusFlatBuffer {
  return (obj || new StatusFlatBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStatusFlatBuffer(bb:flatbuffers.ByteBuffer, obj?:StatusFlatBuffer):StatusFlatBuffer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StatusFlatBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ok():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

err(obj?:ErrInstructionErrorFlatBuffer):ErrInstructionErrorFlatBuffer|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ErrInstructionErrorFlatBuffer()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startStatusFlatBuffer(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addOk(builder:flatbuffers.Builder, ok:boolean) {
  builder.addFieldInt8(0, +ok, +false);
}

static addErr(builder:flatbuffers.Builder, errOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, errOffset, 0);
}

static endStatusFlatBuffer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
