// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BlockEventFlatBuffer } from '../solana/block-event-flat-buffer.js';


export class BlockEventsFlatBuffer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BlockEventsFlatBuffer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBlockEventsFlatBuffer(bb:flatbuffers.ByteBuffer, obj?:BlockEventsFlatBuffer):BlockEventsFlatBuffer {
  return (obj || new BlockEventsFlatBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBlockEventsFlatBuffer(bb:flatbuffers.ByteBuffer, obj?:BlockEventsFlatBuffer):BlockEventsFlatBuffer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BlockEventsFlatBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

endBlock(index: number, obj?:BlockEventFlatBuffer):BlockEventFlatBuffer|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new BlockEventFlatBuffer()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

endBlockLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

beginBlock(index: number, obj?:BlockEventFlatBuffer):BlockEventFlatBuffer|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new BlockEventFlatBuffer()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

beginBlockLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startBlockEventsFlatBuffer(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addEndBlock(builder:flatbuffers.Builder, endBlockOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, endBlockOffset, 0);
}

static createEndBlockVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEndBlockVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBeginBlock(builder:flatbuffers.Builder, beginBlockOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, beginBlockOffset, 0);
}

static createBeginBlockVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBeginBlockVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endBlockEventsFlatBuffer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // end_block
  builder.requiredField(offset, 6) // begin_block
  return offset;
}

static createBlockEventsFlatBuffer(builder:flatbuffers.Builder, endBlockOffset:flatbuffers.Offset, beginBlockOffset:flatbuffers.Offset):flatbuffers.Offset {
  BlockEventsFlatBuffer.startBlockEventsFlatBuffer(builder);
  BlockEventsFlatBuffer.addEndBlock(builder, endBlockOffset);
  BlockEventsFlatBuffer.addBeginBlock(builder, beginBlockOffset);
  return BlockEventsFlatBuffer.endBlockEventsFlatBuffer(builder);
}
}
