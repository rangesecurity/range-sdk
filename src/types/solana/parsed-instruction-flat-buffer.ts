// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ParsedInfoFlatBuffer } from '../solana/parsed-info-flat-buffer.js';


export class ParsedInstructionFlatBuffer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ParsedInstructionFlatBuffer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsParsedInstructionFlatBuffer(bb:flatbuffers.ByteBuffer, obj?:ParsedInstructionFlatBuffer):ParsedInstructionFlatBuffer {
  return (obj || new ParsedInstructionFlatBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsParsedInstructionFlatBuffer(bb:flatbuffers.ByteBuffer, obj?:ParsedInstructionFlatBuffer):ParsedInstructionFlatBuffer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ParsedInstructionFlatBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

parsed(obj?:ParsedInfoFlatBuffer):ParsedInfoFlatBuffer|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ParsedInfoFlatBuffer()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

program():string|null
program(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
program(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

programId():string|null
programId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
programId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

stackHeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startParsedInstructionFlatBuffer(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addParsed(builder:flatbuffers.Builder, parsedOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, parsedOffset, 0);
}

static addProgram(builder:flatbuffers.Builder, programOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, programOffset, 0);
}

static addProgramId(builder:flatbuffers.Builder, programIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, programIdOffset, 0);
}

static addStackHeight(builder:flatbuffers.Builder, stackHeight:number) {
  builder.addFieldInt32(3, stackHeight, 0);
}

static endParsedInstructionFlatBuffer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // parsed
  return offset;
}

static createParsedInstructionFlatBuffer(builder:flatbuffers.Builder, parsedOffset:flatbuffers.Offset, programOffset:flatbuffers.Offset, programIdOffset:flatbuffers.Offset, stackHeight:number):flatbuffers.Offset {
  ParsedInstructionFlatBuffer.startParsedInstructionFlatBuffer(builder);
  ParsedInstructionFlatBuffer.addParsed(builder, parsedOffset);
  ParsedInstructionFlatBuffer.addProgram(builder, programOffset);
  ParsedInstructionFlatBuffer.addProgramId(builder, programIdOffset);
  ParsedInstructionFlatBuffer.addStackHeight(builder, stackHeight);
  return ParsedInstructionFlatBuffer.endParsedInstructionFlatBuffer(builder);
}
}
