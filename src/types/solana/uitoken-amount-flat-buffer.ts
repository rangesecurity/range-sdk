// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class UITokenAmountFlatBuffer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UITokenAmountFlatBuffer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUITokenAmountFlatBuffer(bb:flatbuffers.ByteBuffer, obj?:UITokenAmountFlatBuffer):UITokenAmountFlatBuffer {
  return (obj || new UITokenAmountFlatBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUITokenAmountFlatBuffer(bb:flatbuffers.ByteBuffer, obj?:UITokenAmountFlatBuffer):UITokenAmountFlatBuffer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UITokenAmountFlatBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

amount():string|null
amount(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
amount(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

decimals():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

uiAmount():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

uiAmountString():string|null
uiAmountString(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
uiAmountString(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startUITokenAmountFlatBuffer(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addAmount(builder:flatbuffers.Builder, amountOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, amountOffset, 0);
}

static addDecimals(builder:flatbuffers.Builder, decimals:number) {
  builder.addFieldInt32(1, decimals, 0);
}

static addUiAmount(builder:flatbuffers.Builder, uiAmount:number) {
  builder.addFieldFloat32(2, uiAmount, 0.0);
}

static addUiAmountString(builder:flatbuffers.Builder, uiAmountStringOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, uiAmountStringOffset, 0);
}

static endUITokenAmountFlatBuffer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUITokenAmountFlatBuffer(builder:flatbuffers.Builder, amountOffset:flatbuffers.Offset, decimals:number, uiAmount:number, uiAmountStringOffset:flatbuffers.Offset):flatbuffers.Offset {
  UITokenAmountFlatBuffer.startUITokenAmountFlatBuffer(builder);
  UITokenAmountFlatBuffer.addAmount(builder, amountOffset);
  UITokenAmountFlatBuffer.addDecimals(builder, decimals);
  UITokenAmountFlatBuffer.addUiAmount(builder, uiAmount);
  UITokenAmountFlatBuffer.addUiAmountString(builder, uiAmountStringOffset);
  return UITokenAmountFlatBuffer.endUITokenAmountFlatBuffer(builder);
}
}
