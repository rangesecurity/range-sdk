// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { DataInstructionFlatBuffer } from '../solana/data-instruction-flat-buffer.js';
import { ParsedInstructionFlatBuffer } from '../solana/parsed-instruction-flat-buffer.js';


export enum InstructionFlatBuffer {
  NONE = 0,
  ParsedInstructionFlatBuffer = 1,
  DataInstructionFlatBuffer = 2
}

export function unionToInstructionFlatBuffer(
  type: InstructionFlatBuffer,
  accessor: (obj:DataInstructionFlatBuffer|ParsedInstructionFlatBuffer) => DataInstructionFlatBuffer|ParsedInstructionFlatBuffer|null
): DataInstructionFlatBuffer|ParsedInstructionFlatBuffer|null {
  switch(InstructionFlatBuffer[type]) {
    case 'NONE': return null; 
    case 'ParsedInstructionFlatBuffer': return accessor(new ParsedInstructionFlatBuffer())! as ParsedInstructionFlatBuffer;
    case 'DataInstructionFlatBuffer': return accessor(new DataInstructionFlatBuffer())! as DataInstructionFlatBuffer;
    default: return null;
  }
}

export function unionListToInstructionFlatBuffer(
  type: InstructionFlatBuffer, 
  accessor: (index: number, obj:DataInstructionFlatBuffer|ParsedInstructionFlatBuffer) => DataInstructionFlatBuffer|ParsedInstructionFlatBuffer|null, 
  index: number
): DataInstructionFlatBuffer|ParsedInstructionFlatBuffer|null {
  switch(InstructionFlatBuffer[type]) {
    case 'NONE': return null; 
    case 'ParsedInstructionFlatBuffer': return accessor(index, new ParsedInstructionFlatBuffer())! as ParsedInstructionFlatBuffer;
    case 'DataInstructionFlatBuffer': return accessor(index, new DataInstructionFlatBuffer())! as DataInstructionFlatBuffer;
    default: return null;
  }
}
