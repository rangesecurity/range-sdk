// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ParsedInfoDetailsFlatBuffer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ParsedInfoDetailsFlatBuffer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsParsedInfoDetailsFlatBuffer(bb:flatbuffers.ByteBuffer, obj?:ParsedInfoDetailsFlatBuffer):ParsedInfoDetailsFlatBuffer {
  return (obj || new ParsedInfoDetailsFlatBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsParsedInfoDetailsFlatBuffer(bb:flatbuffers.ByteBuffer, obj?:ParsedInfoDetailsFlatBuffer):ParsedInfoDetailsFlatBuffer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ParsedInfoDetailsFlatBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

amount():string|null
amount(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
amount(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

authority():string|null
authority(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
authority(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

destination():string|null
destination(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
destination(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

owner():string|null
owner(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
owner(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

delegate():string|null
delegate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
delegate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startParsedInfoDetailsFlatBuffer(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addAmount(builder:flatbuffers.Builder, amountOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, amountOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, sourceOffset, 0);
}

static addAuthority(builder:flatbuffers.Builder, authorityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, authorityOffset, 0);
}

static addDestination(builder:flatbuffers.Builder, destinationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, destinationOffset, 0);
}

static addOwner(builder:flatbuffers.Builder, ownerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, ownerOffset, 0);
}

static addDelegate(builder:flatbuffers.Builder, delegateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, delegateOffset, 0);
}

static endParsedInfoDetailsFlatBuffer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createParsedInfoDetailsFlatBuffer(builder:flatbuffers.Builder, amountOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, authorityOffset:flatbuffers.Offset, destinationOffset:flatbuffers.Offset, ownerOffset:flatbuffers.Offset, delegateOffset:flatbuffers.Offset):flatbuffers.Offset {
  ParsedInfoDetailsFlatBuffer.startParsedInfoDetailsFlatBuffer(builder);
  ParsedInfoDetailsFlatBuffer.addAmount(builder, amountOffset);
  ParsedInfoDetailsFlatBuffer.addSource(builder, sourceOffset);
  ParsedInfoDetailsFlatBuffer.addAuthority(builder, authorityOffset);
  ParsedInfoDetailsFlatBuffer.addDestination(builder, destinationOffset);
  ParsedInfoDetailsFlatBuffer.addOwner(builder, ownerOffset);
  ParsedInfoDetailsFlatBuffer.addDelegate(builder, delegateOffset);
  return ParsedInfoDetailsFlatBuffer.endParsedInfoDetailsFlatBuffer(builder);
}
}
