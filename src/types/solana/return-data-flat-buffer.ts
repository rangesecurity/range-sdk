// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ReturnDataFlatBuffer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ReturnDataFlatBuffer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsReturnDataFlatBuffer(bb:flatbuffers.ByteBuffer, obj?:ReturnDataFlatBuffer):ReturnDataFlatBuffer {
  return (obj || new ReturnDataFlatBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsReturnDataFlatBuffer(bb:flatbuffers.ByteBuffer, obj?:ReturnDataFlatBuffer):ReturnDataFlatBuffer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ReturnDataFlatBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

data(index: number):string
data(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
data(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

dataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

programId():string|null
programId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
programId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startReturnDataFlatBuffer(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dataOffset, 0);
}

static createDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addProgramId(builder:flatbuffers.Builder, programIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, programIdOffset, 0);
}

static endReturnDataFlatBuffer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createReturnDataFlatBuffer(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset, programIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  ReturnDataFlatBuffer.startReturnDataFlatBuffer(builder);
  ReturnDataFlatBuffer.addData(builder, dataOffset);
  ReturnDataFlatBuffer.addProgramId(builder, programIdOffset);
  return ReturnDataFlatBuffer.endReturnDataFlatBuffer(builder);
}
}
