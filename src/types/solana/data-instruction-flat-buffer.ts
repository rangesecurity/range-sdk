// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class DataInstructionFlatBuffer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DataInstructionFlatBuffer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDataInstructionFlatBuffer(bb:flatbuffers.ByteBuffer, obj?:DataInstructionFlatBuffer):DataInstructionFlatBuffer {
  return (obj || new DataInstructionFlatBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDataInstructionFlatBuffer(bb:flatbuffers.ByteBuffer, obj?:DataInstructionFlatBuffer):DataInstructionFlatBuffer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DataInstructionFlatBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

data():string|null
data(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
data(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

accounts(index: number):string
accounts(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
accounts(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

accountsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

programId():string|null
programId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
programId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

stackHeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startDataInstructionFlatBuffer(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dataOffset, 0);
}

static addAccounts(builder:flatbuffers.Builder, accountsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, accountsOffset, 0);
}

static createAccountsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAccountsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addProgramId(builder:flatbuffers.Builder, programIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, programIdOffset, 0);
}

static addStackHeight(builder:flatbuffers.Builder, stackHeight:number) {
  builder.addFieldInt32(3, stackHeight, 0);
}

static endDataInstructionFlatBuffer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDataInstructionFlatBuffer(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset, accountsOffset:flatbuffers.Offset, programIdOffset:flatbuffers.Offset, stackHeight:number):flatbuffers.Offset {
  DataInstructionFlatBuffer.startDataInstructionFlatBuffer(builder);
  DataInstructionFlatBuffer.addData(builder, dataOffset);
  DataInstructionFlatBuffer.addAccounts(builder, accountsOffset);
  DataInstructionFlatBuffer.addProgramId(builder, programIdOffset);
  DataInstructionFlatBuffer.addStackHeight(builder, stackHeight);
  return DataInstructionFlatBuffer.endDataInstructionFlatBuffer(builder);
}
}
