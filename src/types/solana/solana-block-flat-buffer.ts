// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BlockEventsFlatBuffer } from '../solana/block-events-flat-buffer.js';
import { NetworkEnumFlatBuffer } from '../solana/network-enum-flat-buffer.js';
import { SolanaTrxFlatBuffer } from '../solana/solana-trx-flat-buffer.js';


export class SolanaBlockFlatBuffer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SolanaBlockFlatBuffer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSolanaBlockFlatBuffer(bb:flatbuffers.ByteBuffer, obj?:SolanaBlockFlatBuffer):SolanaBlockFlatBuffer {
  return (obj || new SolanaBlockFlatBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSolanaBlockFlatBuffer(bb:flatbuffers.ByteBuffer, obj?:SolanaBlockFlatBuffer):SolanaBlockFlatBuffer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SolanaBlockFlatBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

hash():string|null
hash(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hash(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

height():string|null
height(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
height(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

transactions(index: number, obj?:SolanaTrxFlatBuffer):SolanaTrxFlatBuffer|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new SolanaTrxFlatBuffer()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

transactionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

network():NetworkEnumFlatBuffer {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : NetworkEnumFlatBuffer.Solana;
}

timestamp():string|null
timestamp(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
timestamp(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

blockData():string|null
blockData(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
blockData(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

blockEvents(obj?:BlockEventsFlatBuffer):BlockEventsFlatBuffer|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new BlockEventsFlatBuffer()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startSolanaBlockFlatBuffer(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addHash(builder:flatbuffers.Builder, hashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, hashOffset, 0);
}

static addHeight(builder:flatbuffers.Builder, heightOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, heightOffset, 0);
}

static addTransactions(builder:flatbuffers.Builder, transactionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, transactionsOffset, 0);
}

static createTransactionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTransactionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNetwork(builder:flatbuffers.Builder, network:NetworkEnumFlatBuffer) {
  builder.addFieldInt8(3, network, NetworkEnumFlatBuffer.Solana);
}

static addTimestamp(builder:flatbuffers.Builder, timestampOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, timestampOffset, 0);
}

static addBlockData(builder:flatbuffers.Builder, blockDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, blockDataOffset, 0);
}

static addBlockEvents(builder:flatbuffers.Builder, blockEventsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, blockEventsOffset, 0);
}

static endSolanaBlockFlatBuffer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSolanaBlockFlatBufferBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedSolanaBlockFlatBufferBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

}
