// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ErrInstructionErrorFlatBuffer } from '../solana/err-instruction-error-flat-buffer.js';
import { InnerInstructionFlatBuffer } from '../solana/inner-instruction-flat-buffer.js';
import { ReturnDataFlatBuffer } from '../solana/return-data-flat-buffer.js';
import { StatusFlatBuffer } from '../solana/status-flat-buffer.js';
import { TokenBalanceFlatBuffer } from '../solana/token-balance-flat-buffer.js';


export class SolanaTrxMetaFlatBuffer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SolanaTrxMetaFlatBuffer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSolanaTrxMetaFlatBuffer(bb:flatbuffers.ByteBuffer, obj?:SolanaTrxMetaFlatBuffer):SolanaTrxMetaFlatBuffer {
  return (obj || new SolanaTrxMetaFlatBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSolanaTrxMetaFlatBuffer(bb:flatbuffers.ByteBuffer, obj?:SolanaTrxMetaFlatBuffer):SolanaTrxMetaFlatBuffer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SolanaTrxMetaFlatBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

err(obj?:ErrInstructionErrorFlatBuffer):ErrInstructionErrorFlatBuffer|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ErrInstructionErrorFlatBuffer()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

fee():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

status(obj?:StatusFlatBuffer):StatusFlatBuffer|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new StatusFlatBuffer()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

rewards():string|null
rewards(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rewards(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

returnData(obj?:ReturnDataFlatBuffer):ReturnDataFlatBuffer|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new ReturnDataFlatBuffer()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

logMessages(index: number):string
logMessages(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
logMessages(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

logMessagesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

preBalances(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

preBalancesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

preBalancesArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

postBalances(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

postBalancesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

postBalancesArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

preTokenBalances(index: number, obj?:TokenBalanceFlatBuffer):TokenBalanceFlatBuffer|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new TokenBalanceFlatBuffer()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

preTokenBalancesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

innerInstructions(index: number, obj?:InnerInstructionFlatBuffer):InnerInstructionFlatBuffer|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new InnerInstructionFlatBuffer()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

innerInstructionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

postTokenBalances(index: number, obj?:TokenBalanceFlatBuffer):TokenBalanceFlatBuffer|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new TokenBalanceFlatBuffer()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

postTokenBalancesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

computeUnitsConsumed():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startSolanaTrxMetaFlatBuffer(builder:flatbuffers.Builder) {
  builder.startObject(12);
}

static addErr(builder:flatbuffers.Builder, errOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, errOffset, 0);
}

static addFee(builder:flatbuffers.Builder, fee:number) {
  builder.addFieldInt32(1, fee, 0);
}

static addStatus(builder:flatbuffers.Builder, statusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, statusOffset, 0);
}

static addRewards(builder:flatbuffers.Builder, rewardsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, rewardsOffset, 0);
}

static addReturnData(builder:flatbuffers.Builder, returnDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, returnDataOffset, 0);
}

static addLogMessages(builder:flatbuffers.Builder, logMessagesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, logMessagesOffset, 0);
}

static createLogMessagesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLogMessagesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPreBalances(builder:flatbuffers.Builder, preBalancesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, preBalancesOffset, 0);
}

static createPreBalancesVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createPreBalancesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createPreBalancesVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startPreBalancesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPostBalances(builder:flatbuffers.Builder, postBalancesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, postBalancesOffset, 0);
}

static createPostBalancesVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createPostBalancesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createPostBalancesVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startPostBalancesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPreTokenBalances(builder:flatbuffers.Builder, preTokenBalancesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, preTokenBalancesOffset, 0);
}

static createPreTokenBalancesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPreTokenBalancesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addInnerInstructions(builder:flatbuffers.Builder, innerInstructionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, innerInstructionsOffset, 0);
}

static createInnerInstructionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startInnerInstructionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPostTokenBalances(builder:flatbuffers.Builder, postTokenBalancesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, postTokenBalancesOffset, 0);
}

static createPostTokenBalancesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPostTokenBalancesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addComputeUnitsConsumed(builder:flatbuffers.Builder, computeUnitsConsumed:number) {
  builder.addFieldInt32(11, computeUnitsConsumed, 0);
}

static endSolanaTrxMetaFlatBuffer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 8) // status
  builder.requiredField(offset, 20) // preTokenBalances
  builder.requiredField(offset, 22) // innerInstructions
  builder.requiredField(offset, 24) // postTokenBalances
  return offset;
}

}
