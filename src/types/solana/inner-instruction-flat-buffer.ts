// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { InstructionFlatBuffer, unionToInstructionFlatBuffer, unionListToInstructionFlatBuffer } from '../solana/instruction-flat-buffer.js';


export class InnerInstructionFlatBuffer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):InnerInstructionFlatBuffer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsInnerInstructionFlatBuffer(bb:flatbuffers.ByteBuffer, obj?:InnerInstructionFlatBuffer):InnerInstructionFlatBuffer {
  return (obj || new InnerInstructionFlatBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsInnerInstructionFlatBuffer(bb:flatbuffers.ByteBuffer, obj?:InnerInstructionFlatBuffer):InnerInstructionFlatBuffer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new InnerInstructionFlatBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

index():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

instructionsType(index: number):InstructionFlatBuffer|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

instructionsTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

instructionsTypeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

instructions(index: number, obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

instructionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startInnerInstructionFlatBuffer(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt32(0, index, 0);
}

static addInstructionsType(builder:flatbuffers.Builder, instructionsTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, instructionsTypeOffset, 0);
}

static createInstructionsTypeVector(builder:flatbuffers.Builder, data:InstructionFlatBuffer[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startInstructionsTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addInstructions(builder:flatbuffers.Builder, instructionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, instructionsOffset, 0);
}

static createInstructionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startInstructionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endInnerInstructionFlatBuffer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // instructions_type
  builder.requiredField(offset, 8) // instructions
  return offset;
}

static createInnerInstructionFlatBuffer(builder:flatbuffers.Builder, index:number, instructionsTypeOffset:flatbuffers.Offset, instructionsOffset:flatbuffers.Offset):flatbuffers.Offset {
  InnerInstructionFlatBuffer.startInnerInstructionFlatBuffer(builder);
  InnerInstructionFlatBuffer.addIndex(builder, index);
  InnerInstructionFlatBuffer.addInstructionsType(builder, instructionsTypeOffset);
  InnerInstructionFlatBuffer.addInstructions(builder, instructionsOffset);
  return InnerInstructionFlatBuffer.endInnerInstructionFlatBuffer(builder);
}
}
