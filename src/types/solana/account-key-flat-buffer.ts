// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class AccountKeyFlatBuffer {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): AccountKeyFlatBuffer {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsAccountKeyFlatBuffer(
    bb: flatbuffers.ByteBuffer,
    obj?: AccountKeyFlatBuffer,
  ): AccountKeyFlatBuffer {
    return (obj || new AccountKeyFlatBuffer()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  static getSizePrefixedRootAsAccountKeyFlatBuffer(
    bb: flatbuffers.ByteBuffer,
    obj?: AccountKeyFlatBuffer,
  ): AccountKeyFlatBuffer {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new AccountKeyFlatBuffer()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  pubkey(): string | null;
  pubkey(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  pubkey(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  signer(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
  }

  source(): string | null;
  source(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  source(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  writable(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
  }

  static startAccountKeyFlatBuffer(builder: flatbuffers.Builder) {
    builder.startObject(4);
  }

  static addPubkey(
    builder: flatbuffers.Builder,
    pubkeyOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(0, pubkeyOffset, 0);
  }

  static addSigner(builder: flatbuffers.Builder, signer: boolean) {
    builder.addFieldInt8(1, +signer, +false);
  }

  static addSource(
    builder: flatbuffers.Builder,
    sourceOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(2, sourceOffset, 0);
  }

  static addWritable(builder: flatbuffers.Builder, writable: boolean) {
    builder.addFieldInt8(3, +writable, +false);
  }

  static endAccountKeyFlatBuffer(
    builder: flatbuffers.Builder,
  ): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createAccountKeyFlatBuffer(
    builder: flatbuffers.Builder,
    pubkeyOffset: flatbuffers.Offset,
    signer: boolean,
    sourceOffset: flatbuffers.Offset,
    writable: boolean,
  ): flatbuffers.Offset {
    AccountKeyFlatBuffer.startAccountKeyFlatBuffer(builder);
    AccountKeyFlatBuffer.addPubkey(builder, pubkeyOffset);
    AccountKeyFlatBuffer.addSigner(builder, signer);
    AccountKeyFlatBuffer.addSource(builder, sourceOffset);
    AccountKeyFlatBuffer.addWritable(builder, writable);
    return AccountKeyFlatBuffer.endAccountKeyFlatBuffer(builder);
  }
}
